package com.camunda.powerbi.service;

import java.io.IOException;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.camunda.zeebe.client.api.response.ActivatedJob;
import io.camunda.zeebe.spring.client.annotation.ZeebeWorker;

@Service
public class GetTokenAccess {
	
	@Autowired
	Environment env;
	
	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
	   return builder.build();
	}
	
	private RestTemplate restTemplate;
	
	@SuppressWarnings("unchecked")
	@ZeebeWorker(type = "getDataSetsTask", autoComplete = true)
	public void generateToken(final ActivatedJob job)
			throws JsonParseException, JsonMappingException, IOException, InterruptedException {
		System.out.println("Inside Service task");
		String jsonString = job.getVariables();
		ObjectMapper mapper = new ObjectMapper();
		Map<String, String> map = mapper.readValue(jsonString, Map.class);
		String client_id=map.get("client_id");
		String tenant_id=map.get("tenant_id");
		String dataset_id=map.get("dataset_id");
		String client_secret=map.get("client_secret");
		String url=env.getProperty("url")+tenant_id+"/oauth2/token";
		getAccessToken(url,client_id,dataset_id,client_secret);
		
		
	}
	
	public void getAccessToken(String url,String client_id,String dataset_id,String client_secret) throws IOException, InterruptedException {
		//GET
		/*String urls="https://covid19.mathdro.id/api";
		HttpRequest request=HttpRequest.newBuilder().GET().uri(URI.create(urls)).build();
		HttpClient client=HttpClient.newBuilder().build();
		HttpResponse<String> response=client.send(request, HttpResponse.BodyHandlers.ofString());
		System.out.println("Value "+response.body());*/
		
//		String urlEncoded=url+"?grant_type=client_credentials&client_id="+client_id+"&client_secret="+client_secret+"&scope=Dataset.ReadWrite.All";
//		System.out.println(urlEncoded);
//		HttpRequest postRequest=HttpRequest.newBuilder()
//				.uri(URI.create(url))
//				.header("Content-Type","application/x-www-form-urlencoded")
//				.POST(BodyPublishers.ofString(urlEncoded))
//				.build();
//		HttpClient httpClient=HttpClient.newHttpClient();
//		HttpResponse<String> response=httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());
//		System.out.println("Value "+response.body());
		
		 HttpHeaders headers = new HttpHeaders();
         headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
         MultiValueMap<String, Object> requestFormData = new LinkedMultiValueMap<>();
         requestFormData.add("grant_type",env.getProperty("grant_type"));
         requestFormData.add("client_id", client_id);
         requestFormData.add("client_secret", client_secret);
         requestFormData.add("scope", env.getProperty("scope"));
     
         HttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(requestFormData, headers);
         Object response = restTemplate.postForEntity(url, request, Object.class);
         System.out.println(response);
				
		
	}

}
